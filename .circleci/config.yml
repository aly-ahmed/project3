version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments 
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}     
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Example: kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/5hrakTfGf13nJvxAgSYgNx/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            echo SUCCESS = $SUCCESS
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: test backend
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: scan frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: scan backend
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
   
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: send workflow id to storage
          command: |
            OldWorkflowID=$(aws cloudformation \
                                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                                  --no-paginate --output text)
            
            curl https://kvdb.io/5hrakTfGf13nJvxAgSYgNx/oldid_${CIRCLE_WORKFLOW_ID:0:7}  -d ${OldWorkflowID}
            
            STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo stacks: "${STACKS[@]}"
            if [[ "${STACKS}"  != "" ]]
            then
              curl https://kvdb.io/5hrakTfGf13nJvxAgSYgNx/oldstacks_${CIRCLE_WORKFLOW_ID:0:7}  -d ${STACKS}
            else
              curl https://kvdb.io/5hrakTfGf13nJvxAgSYgNx/oldstacks_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            
      - run:
          name: install tar gzip
          command: |
            yum update -y
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      
      
      - run:
          name: Add back-end ip to ansible inventory
          command: | 
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress[]" \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            pwd
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment

  configure-infrastructure:
    
    docker:
      - image: circleci/python:3.6.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7a:6d:6a:71:7d:32:4b:e4:ff:da:24:59:16:e6:27:f0"
      
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo python3 -m pip install -U pip
            sudo python -m pip install ansible
            sudo apt install software-properties-common --force-yes
            sudo apt install tar gzip --yes
            sudo apt install awscli --yes
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Configure server
          command: |
            pwd
            cat ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i "/home/circleci/project/.circleci/ansible/inventory.txt" configure-server.yml
      # Here's where you will add some code to rollback on failure     
      - destroy-environment 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]